{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"hello\"\n};\nconst _hoisted_2 = {\n  class: \"hello-world-text\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [!$data.textVisible ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.showHelloWorld && $options.showHelloWorld(...args)),\n    class: \"hello-world-button\"\n  }, \"click me ðŸ™‚\")) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"p\", _hoisted_2, _toDisplayString($data.responseText), 1 /* TEXT */)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","$data","textVisible","key","onClick","_cache","args","$options","showHelloWorld","_createCommentVNode","_createElementVNode","_hoisted_2","_toDisplayString","responseText"],"sources":["C:\\Program Files\\Vue\\test\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n    <div class=\"hello\">\n        <button v-if=\"!textVisible\" @click=\"showHelloWorld\" class=\"hello-world-button\">click me ðŸ™‚</button>\n        <p class=\"hello-world-text\">{{ responseText }}</p>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'HelloWorld',\n    props: {\n        msg: String,\n    },\n    data() {\n        return {\n            responseText: '',\n            textVisible: false,\n        };\n    },\n    methods: {\n        async showHelloWorld() {\n            console.log('button pressed');\n            try {\n                const res = await fetch('http://localhost:8081/api/hello');\n                if (res.ok) {\n                    this.responseText = await res.text();\n                    this.textVisible = true;\n                }\n            } catch (error) {\n                console.error(error);\n            }\n        },\n    },\n};\n</script>\n\n<style scoped>\n    button {\n        width: 300px;\n        height: 150px;\n        font-size: 50px;\n    }\n    p {\n        font-size: 50px;\n    }\n</style>\n"],"mappings":";;;EACSA,KAAK,EAAC;AAAO;;EAEXA,KAAK,EAAC;AAAkB;;uBAF/BC,mBAAA,CAGM,OAHNC,UAGM,G,CAFaC,KAAA,CAAAC,WAAW,I,cAA1BH,mBAAA,CAAmG;IAF3GI,GAAA;IAEqCC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,cAAA,IAAAD,QAAA,CAAAC,cAAA,IAAAF,IAAA,CAAc;IAAER,KAAK,EAAC;KAAqB,aAAW,KAFlGW,mBAAA,gBAGQC,mBAAA,CAAkD,KAAlDC,UAAkD,EAAAC,gBAAA,CAAnBX,KAAA,CAAAY,YAAY,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}